# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserWithoutPassword {
  id: String!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  isEmailVerified: Boolean
  emailVerificationToken: String
  emailVerificationExpires: DateTime
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  otpCode: String
  otpExpires: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthResponse {
  success: Boolean!
  message: String
  token: String
  user: UserWithoutPassword
}

type OtpResponse {
  success: Boolean!
  message: String
  otpId: String
}

type UserEntity implements IUser {
  id: ID!
  name: String!
  role: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  isEmailVerified: Boolean
  emailVerificationToken: String
  emailVerificationExpires: DateTime
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  otpCode: String
  otpExpires: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

interface IUser {
  id: ID!
  name: String!
  role: String!
}

type ShippingAddress {
  street: String!
  city: String!
  state: String
  postalCode: String!
  country: String!
}

type Creator implements IUser {
  id: ID!
  name: String!
  role: String!
  books: [Book!]!
}

type Book {
  book_id: String!
  title: String!
  year: String!
  isBorrowed: Boolean!
  creator: [Creator!]!
}

type Cart {
  cart_id: String!
  user_id: String!
  items: [Book!]!
  shipping_address: ShippingAddress!
}

type Product {
  id: Int!
  name: String!
  description: String!
  price: Float!
  stock: Int!
  category: String!
  brand: String!
  image: String
  rating: Float
  reviewCount: Int
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaginationInfo {
  page: Int!
  limit: Int!
  total: Int!
  totalPages: Int!
  hasNext: Boolean!
  hasPrev: Boolean!
}

type PaginatedProducts {
  products: [Product!]!
  pagination: PaginationInfo!
}

type Order {
  """Example field (placeholder)"""
  exampleField: Int!
}

input ShippingAddressInput {
  street: String!
  city: String!
  state: String
  postalCode: String!
  country: String!
}

type Query {
  getUsers: [UserEntity!]!
  getUser(id: String!): UserEntity
  cart(id: Int!): Cart!
  products(filter: ProductFilterInput, pagination: PaginationInput, sort: ProductSortInput): PaginatedProducts!
  product(id: Int!): Product!
  categories: [String!]!
  brands: [String!]!
  productsByCategory(category: String!): [Product!]!
  productsByBrand(brand: String!): [Product!]!
  searchProducts(query: String!): [Product!]!
  books: [Book!]!
  book(id: String!): Book!
  creators: [Creator!]!
  creator(id: String!): Creator!
  search(searchInput: SearchInput!): [SearchResult!]!
  order(id: Int!): Order!
}

input ProductFilterInput {
  searchKey: String
  category: String
  brand: String
  minPrice: Float
  maxPrice: Float
  minRating: Float
  inStock: Boolean
  isActive: Boolean
}

input PaginationInput {
  page: Int! = 1
  limit: Int! = 10
}

input ProductSortInput {
  sortBy: String
  sortOrder: String
}

union SearchResult = Creator | Book

input SearchInput {
  searchKey: String!
  paginate: PaginationInput!
}

type Mutation {
  register(registerInput: RegisterDto!): AuthResponse!
  login(loginInput: LoginDto!): AuthResponse!
  verifyEmail(token: String!): AuthResponse!
  forgotPassword(forgotPasswordDto: ForgotPasswordDto!): AuthResponse!
  resetPassword(resetPasswordDto: ResetPasswordDto!): AuthResponse!
  sendOtp(email: String!): OtpResponse!
  verifyOtp(verifyOtpDto: VerifyOtpDto!): AuthResponse!
  resendOtp(resendOtpDto: ResendOtpDto!): OtpResponse!
  createUser(input: CreateUserDto!): UserEntity!
  updateUser(input: UpdateUserDto!): UserEntity!
  deleteUser(id: String!): Boolean!
  createCart(createCartInput: CreateCartInput!): Cart!
  updateCart(updateCartInput: UpdateCartInput!): Cart!
  removeCart(id: Int!): Cart!
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  removeProduct(id: Int!): Product!
  createBook(createBookInput: CreateBookInput!): Book!
  updateBook(input: UpdateBookInput!): Book!
  removeBook(id: String!): Book!
  createCreator(createCreatorInput: CreateCreatorInput!): Creator!
  updateCreator(updateCreatorInput: UpdateCreatorInput!): Creator!
  removeCreator(id: String!): Creator!
  clearSearchHistory(searchInput: SearchInput!): Boolean!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  removeOrder(id: Int!): Order!
}

input RegisterDto {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  role: String! = "USER"
}

"""Input should be as string trimed to success the operation"""
input LoginDto {
  email: String!
  password: String!
}

input ForgotPasswordDto {
  email: String!
}

input ResetPasswordDto {
  token: String!
  newPassword: String!
}

input VerifyOtpDto {
  email: String!
  otpCode: String!
}

input ResendOtpDto {
  email: String!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  shippingAddress: ShippingAddressInput
  role: String!
}

input UpdateUserDto {
  id: String!
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  isEmailVerified: Boolean
  emailVerificationToken: String
  emailVerificationExpires: DateTime
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  otpCode: String
  otpExpires: DateTime
}

input CreateCartInput {
  cart_id: ID
  user_id: String!
  items: [CreateBookInput!]
  shipping_address: ShippingAddressInput
}

"""
This mutation responsable to add a new book to the libarary, all field are required 
"""
input CreateBookInput {
  creatorIds: [String!]!
}

input UpdateCartInput {
  cart_id: ID
  user_id: String
  items: [CreateBookInput!]
  shipping_address: ShippingAddressInput
  id: Int!
}

input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Int!
  category: String!
  brand: String!
  image: String
  rating: Float
  reviewCount: Int
  isActive: Boolean! = true
}

input UpdateProductInput {
  name: String
  description: String
  price: Float
  stock: Int
  category: String
  brand: String
  image: String
  rating: Float
  reviewCount: Int
  isActive: Boolean = true
  id: Int!
}

input UpdateBookInput {
  book_id: String!
  title: String
  year: String
  isBorrowed: Boolean
  creatorIds: [String!]
}

input CreateCreatorInput {
  name: String!
}

input UpdateCreatorInput {
  name: String
  id: String!
}

input CreateOrderInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateOrderInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}